package Graph;
import java.util.*;

public class BellmanFordSSSP {

	int V;
	int E;
	ArrayList<edge> adjlist;
	
	BellmanFordSSSP(int V,int E){
		this.V = V;
		this.E = E;
		adjlist = new ArrayList<>();
	}
	
	public class edge{
		int from;
		int to;
		int weight;
		edge(int from,int to,int weight){
			this.from = from;
			this.to = to;
			this.weight = weight;
		}
	}
		
	public void addedge(int from,int to,int weight) {
		edge e = new edge(from,to,weight);
		adjlist.add(e);
	}
	
	
	public void bellmanford() {
		
		int distance[] = new int[V];
		Arrays.fill(distance,Integer.MAX_VALUE);
		int src = adjlist.get(0).from;
		distance[src] =0; 
		boolean updated = false;
		int parent[] = new int[V];
		Arrays.fill(parent,-1);
		for(int i=0;i<V-1;i++) {
			for(edge ele:adjlist) {
				if(distance[ele.to]!=Integer.MAX_VALUE && distance[ele.from]+ele.weight<distance[ele.to]) {
					parent[ele.to] = ele.from;
					updated = true;
					distance[ele.to] = ele.weight+distance[ele.from];
				}
			}
			if(updated==false) break;
			updated = false;
		}
		
		updated = false;
		for(edge ele:adjlist) {
			if(distance[ele.from]!=Integer.MAX_VALUE && distance[ele.from]+ele.weight<distance[ele.to]) {
				updated = true;
				break;
			}
		}
		
		if(updated==true) System.out.println("Graph has -ve edge weight cycle");
		else {
			System.out.println("No negative edge weight cycle");
			
		}
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		int V = sc.nextInt();
		int E = sc.nextInt();
		BellmanFordSSSP graph = new BellmanFordSSSP(V,E);
		for(int i=0;i<E;i++) {
			graph.addedge(sc.nextInt(), sc.nextInt(), sc.nextInt());
		}
		graph.bellmanford();
		

	}

}

//6
//9
//0 1 4
//0 2 6
//1 2 6
//2 3 1
//1 3 3
//1 4 4
//4 3 2
//4 5 7
//3 5 3


7 25
0 1 2
0 2 -2
0 3 -1
0 4 -6
0 6 2
1 0 -2
1 2 4
1 4 -7
1 6 10
2 0 -8
2 1 10
2 6 -8
3 1 -1
3 4 4
4 1 -11
4 2 -10
4 3 -4
5 0 1
5 2 8
5 3 -3
5 4 3
5 6 6
6 0 9
6 1 1
6 3 -11
