class Solution {
    public static class edge{
        int from;
        int to;
        edge(int from,int to){
            this.from = from;
            this.to = to;
        }
    }
    
    ArrayList<edge> AdjList[];
    public static class pair{
        int val;
        int level;
        pair(int val,int level){
            this.val = val;
            this.level = level;
        }
    }
    public boolean isBipartite(int V,int E,int level[]){
        Arrays.fill(level,-1);
        for(int i=1;i<=V;i++){
            if(level[i]==-1) {
                boolean ans = helper(level,i);
                if(ans==false) return false;
            }
        }
        return true;   
    }
    public boolean helper(int level[],int src){
        Queue<pair> queue = new ArrayDeque<>();
        queue.add(new pair(src,1));
        while(queue.size()>0){
            pair curr = queue.remove();
            if(level[curr.val]!=-1){
                if(level[curr.val]!=curr.level) return false;
            }
            else{
                level[curr.val] = curr.level;
                for(edge ele:AdjList[curr.val]){
                    if(level[ele.to]==-1){
                        queue.add(new pair(ele.to,curr.level+1));
                    }
                }
            }
            
        }
        
        return true;
        
    }
    
    public boolean possibleBipartition(int n, int[][] dislikes) {
        int E = dislikes.length;
        if(E==0) return true;
        if(E==1) return true;
        AdjList = new ArrayList[n+1];
        for(int i=0;i<n+1;i++){
            AdjList[i] = new ArrayList<>();
        }
        for(int i=1;i<=E;i++){
            edge new_edge = new edge(dislikes[i-1][0],dislikes[i-1][1]);
            edge new_edge2 = new edge(dislikes[i-1][1],dislikes[i-1][0]);
            AdjList[dislikes[i-1][0]].add(new_edge);
            AdjList[dislikes[i-1][1]].add(new_edge2);
            
        }
        int level[] = new int[n+1];
        return isBipartite(n,E,level);
        
    }
}
