package Graph;

import java.util.*;

public class dsuf {
	
	int V;
	int E;
	ArrayList<edge> adjlist;
	int parent[];
	
	dsuf(int V,int E){
		this.V = V;
		this.E = E;
		adjlist = new ArrayList<>();
		parent = new int[V];
		for(int i=0;i<V;i++) {
			parent[i] =-1;
		}
		
	}
	
	public class edge{
		int from;
		int to;
		edge(int from,int to){
			this.from = from;
			this.to = to;
		}
	}
	
	
	public void addedge(int from,int to) {
		edge e1 = new edge(from,to);
		adjlist.add(e1);
	}
	
	
	public int find(int a) {
		if(parent[a]==-1) return a;
		else return find(parent[a]);
	}
	
	public void union(int a,int b) {
		int p1 = find(a);
		int p2 = find(b);
		if(p1==p2) return;
		parent[p1] = p2;
		
	}
	
	public boolean cycle() {
		
		for(edge ele:adjlist) {
			
			int a =find(ele.from);
			int b = find(ele.to);
			if(a==b) return true;
			else union(ele.from,ele.to);

		}
		return false;
		
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		int V = sc.nextInt();
		int E = sc.nextInt();
		dsuf graph = new dsuf(V,E);
		for(int i=0;i<E;i++) {
			graph.addedge(sc.nextInt(),sc.nextInt());
		}
		boolean c = graph.cycle();
		System.out.println(c);
		

	}

}
