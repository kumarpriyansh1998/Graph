https://leetcode.com/problems/swim-in-rising-water/

//I can think of 2 Methods to solve this problem. 1st method is Binary Search + DFS + pruning and 2nd method is Dijkstra Algorithm.
// Here is my solution using 1st method. It goes like suppose you dont know the answer . But you know the range of answer and You Make a guess. 
//If your guess works out, then shift to left part otherwise shift to right  just like we do in any binary search. 
//Now all you have to do is write a function which check for a particular value,if are you able to travel to the right corner or not.
//This can simply be done using DFS. 




class Solution {
    public int swimInWater(int[][] grid) {
        int m =grid.length;
        int n = grid[0].length;
        int l=0;
        int r=2500;
        while(l<r){
            int mid =l+(r-l)/2;
            boolean ans = func(grid,0,0,mid,new boolean[m][n]);
            // System.out.println(ans+" "+mid);
            if(ans==true) r = mid;
            else l = mid+1;
        }
        
        return l;
    }
    
    
    int dir[][] = {{1,0},{0,1},{-1,0},{0,-1}};
    public boolean func(int[][] grid,int i,int j,int limit,boolean visited[][]){
        if(!isValid(grid,i,j,limit,visited)) return false;
        if(i==grid.length-1 && j==grid[0].length-1) return true;
        visited[i][j] = true;
        for(int ele[]:dir){
            int x = ele[0];
            int y = ele[1];
            if(func(grid,i+x,j+y,limit,visited)) return true;
        }

        return false;
        
    }
    
    
    public boolean isValid(int grid[][],int i,int j,int limit,boolean visited[][]){
        int m = grid.length;
        int n = grid[0].length;
        if(i<0 || j<0 || i>m-1 || j>n-1) return false;
        if(visited[i][j]==true) return false;
        if(grid[i][j]>limit) return false;
        return true;
        
    }
}
