package Graph2;
import java.util.*;

public class DFS_pep {
	int V;
	int E;
	ArrayList<edge> AdjList[];
	
	DFS_pep(int V,int E){
		this.V = V;
		this.E = E;
		AdjList = new ArrayList[V];
		for(int i=0;i<V;i++) {
			AdjList[i] = new ArrayList<>();
		}
	} 
	
	public class edge{
		int from;
		int to;
		int weight;
		edge(int from,int to,int weight){
			this.weight = weight;
			this.to =to;
			this.from = from;
		}
	}
	
	public void add_node(int from,int to,int weight) {
		edge to_add1= new edge(from,to,weight);
		edge to_add2 = new edge(to,from,weight);
		AdjList[from].add(to_add1);
		AdjList[to].add(to_add2);
	}
	



	
	public void print_all_path(int src,int dest) {
		boolean visited[] = new boolean[V];
		
		print_all_path_helper(src,dest,visited,""+src);
	}
	
	public void print_all_path_helper(int src,int dest,boolean visited[],String psf) {
		if(src==dest) {
			System.out.println(psf);
			return;
		}
		if(visited[src]==false) {
			visited[src]=true;
			for(edge ele:AdjList[src]) {
				print_all_path_helper(ele.to,dest,visited,psf+ele.to);
			}
			visited[src] = false;
		}
		return;
		
		
	}
	
	

	
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		///////////////////I/0
		int V = sc.nextInt();//Vertices
		int E = sc.nextInt();//Edges
		DFS_pep graph = new DFS_pep(V,E);
		for(int i=0;i<E;i++) {
			graph.add_node(sc.nextInt(),sc.nextInt(),sc.nextInt()); //V edge in from to weight format Ex: 0 1 5
		}

		graph.print_all_path(0, 8);
		
		
		
	}
	


}



//Sample graph

//7
//8
//0 1 10
//1 2 10
//2 3 10
//0 3 10
//3 4 10
//4 5 10
//5 6 10
//4 6 10




//9
//9
//0 1 1
//1 2 1
//2 3 1
//3 4 1
//2 5 1
//5 6 1
//5 7 1
//7 8 1
//4 7 1
