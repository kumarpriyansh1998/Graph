package Graph;
import java.util.*;

public class TarjansAlgo {
	int V;
	int E;
	ArrayList<edge> AdjList[];
	
	TarjansAlgo(int V,int E){
		this.E = E;
		this.V = V;
		AdjList = new ArrayList[V];
		for(int i=0;i<V;i++) {
			AdjList[i] = new ArrayList<>();
		}
	}
	
	public static class edge{
		int from;
		int to;
		int weight;
		edge(int from,int to,int weight){
			this.from =from;
			this.to =to;
			this.weight = weight;
		}
	}
	
	
	public void add_edge(int from,int to,int weight) {
		edge curr = new edge(from,to,weight);
		AdjList[from].add(curr);
		
	}
	
	public void tarjansSSC() {
		
		int time[] = new int[V];
		Arrays.fill(time, -1);
		int low[] = new int[V];
		Arrays.fill(low, -1);
		int timer =0;
		Stack<Integer> stack = new Stack<>();
		boolean instack[] = new boolean[V];
		int src= 0;
		tarjans_utility(time,low,stack,instack,src);
		
	}
	
	public static int timer =0;
	
	public void tarjans_utility(int time[],int low[],Stack<Integer> stack,boolean instack[],int src) {
		time[src] = timer;
		low[src] = timer;
		timer = timer+1;
		stack.push(src); 
		instack[src] = true;
		for(edge ele:AdjList[src]) {
			
			if(time[ele.to]!=-1) {
				
				if(instack[ele.to]==true) {
					
					low[src] = Math.min(low[src], time[ele.to]);
				}
			}
			else {
				
				tarjans_utility(time,low,stack,instack,ele.to);
				low[src] = Math.min(low[src], low[ele.to]);
			}
		}
		
		if(low[src]==time[src]) {
			
			System.out.print("SSC ");
			while(stack.peek()!=src) {
				
				int temp = stack.pop();
				instack[temp] = false;
				System.out.print(temp+" ");
			}
			
			int temp = stack.pop();
			System.out.println(temp);
			instack[temp] = false;
			
		}
	}
	
	

public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		int V  = sc.nextInt();
		int E = sc.nextInt();
		TarjansAlgo graph = new TarjansAlgo(V,E);
		for(int i=0;i<E;i++) {
			graph.add_edge(sc.nextInt(),sc.nextInt(),sc.nextInt());
			
		}
		graph.tarjansSSC();

	}

}




//7
//9
//0 1 1
//1 2 1
//1 3 1
//3 4 1
//4 0 1
//4 5 1
//4 6 1
//5 6 1
//6 5 1




