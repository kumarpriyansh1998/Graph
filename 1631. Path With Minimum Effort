// class Solution {
//     public int minimumEffortPath(int[][] heights) {
//         int r = heights.length;
//         int c = heights[0].length;
        
//         int small =0;
//         int large =1000000;
        
//         while(small<large){
//             int mid = small + ((large - small)/2);
//             if(is_path(new boolean[r][c],0,0,heights,mid,heights[0][0])){
//                 large = mid;
//             }
//             else small = mid+1;
//         }
        
//         return small;
        
//     }
    
//     int dx[] = {1,0,-1,0};
//     int dy[] = {0,1,0,-1};
//     public boolean is_path(boolean visited[][],int i,int j,int heights[][],int limit,int prev){
//         if(!isValid(visited,i,j,prev,heights,limit)) return false;
//         if(i==visited.length-1 && j==visited[0].length-1) return true;
//         visited[i][j] = true;
//         for(int ind=0;ind<4;ind++){
//             boolean ans = is_path(visited,i+dx[ind],j+dy[ind],heights,limit,heights[i][j]);
//             if(ans==true) return true;
//         }
        
//         return false;
        
        
//     }
    
    
//     public boolean isValid(boolean visited[][],int i,int j,int prev,int[][] heights,int limit){
//         if(i<0 || j<0 || i>=visited.length || j>=visited[0].length) return false;
//         if(visited[i][j]==true) return false;
//         if(Math.abs(heights[i][j]-prev)>limit) return false;
//         return true;
//     }
// }



// /////////////////////////////////////////////////................Method2


// class Solution {
//     int dx[] = {1,0,-1,0};
//     int dy[] = {0,1,0,-1};
//     public int minimumEffortPath(int[][] heights) {
        
        
//         int m = heights.length;
//         int n = heights[0].length;
//         int dist[][] =  new int[m][n];
//         for(int i=0;i<m;i++){
//             Arrays.fill(dist[i],Integer.MAX_VALUE);
//         }
//         dist[0][0] = 0;
//         PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->a[2]-b[2]);
//         pq.offer(new int[]{0,0,0});
//         while(pq.size()>0){
//             int curr[] = pq.poll();
//             int i = curr[0];
//             int j = curr[1];
//             for(int ind=0;ind<4;ind++){
//                 int x = i+dx[ind];
//                 int y = j+dy[ind];
//                 if(x<0 || y<0 || x>m-1||y>n-1) continue;
//                 int msf = Math.max(curr[2],Math.abs(heights[i][j]-heights[x][y]));
//                 if(msf<dist[x][y]){
//                     pq.offer(new int[]{x,y,dist[x][y] = msf});
//                 }
//             }
//         }
        
//         return dist[m-1][n-1];
        
        
        
//     }
// }
