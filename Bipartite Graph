///////https://classroom.pepcoding.com/resources/online-java-foundation/graphs/is-bipartite-official/ojquestion

import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }
   
   static class pair{
       int val;
       int level;
       pair(int val,int level){
           this.val = val;
           this.level = level;
       }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      // write your code here
     int visited[]= new int[vtces];
     Arrays.fill(visited,-1);
     for(int v=0;v<vtces;v++){
         if(visited[v]==-1){
             boolean answer = isBipartite(visited,v,graph);
             if(answer==false){
                 System.out.println(false);
                 return;
             }
         }
     }
     
     
     System.out.println(true);
      
   }
   
   
   public static boolean isBipartite(int visited[],int src,ArrayList<Edge> graph[]){
       
       
       ArrayDeque<pair> queue = new ArrayDeque<>();
       queue.add(new pair(src,0));
       while(queue.isEmpty()==false){
           pair temp = queue.removeFirst();
           if(visited[temp.val]!=-1){
               if(temp.level!=visited[temp.val]){
                   return false;
               }
           }
           else{
               visited[temp.val]=temp.level;
               for(Edge ele:graph[temp.val]){
                   if(visited[ele.nbr]==-1){
                       pair to_add = new pair(ele.nbr,temp.level+1);
                       queue.addLast(to_add);
                   }
               }
           }
           
           
       }
       
       return true;
         
   }
    

}
