import java.io.*;
import java.util.*;


public class Main{
    	public static void main(String args[]) throws Exception {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] st = br.readLine().split(" ");
		int n = Integer.parseInt(st[0]);
		int m = Integer.parseInt(st[1]);

		ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
		for (int i = 0; i < n; i++) {
			graph.add(new ArrayList<>());
		}

		for (int i = 0; i < m; i++) {
			st = br.readLine().split(" ");
			int u = Integer.parseInt(st[0]) - 1;
			int v = Integer.parseInt(st[1]) - 1;
			graph.get(u).add(v);
		}

		System.out.println(findMotherVertex(n, graph));
	}
    public static int findMotherVertex(int N, ArrayList<ArrayList<Integer>>adj){
        
        boolean visited[] = new boolean[N];
        ArrayList<Integer> arr = new ArrayList<>();
        for(int i=0;i<N;i++){
            if(visited[i]==false) {
                dfs(visited,arr,i,adj);
            }
        }
        // System.out.println(arr);
        
        int mother = arr.get(arr.size()-1);
        HashSet<Integer> c = new HashSet<>();
        check(mother,c,adj);
        // System.out.println(c);
        if(c.size()==N) return mother+1;
        else return -1;
    }
    
    public static void check(int m,HashSet<Integer> c,ArrayList<ArrayList<Integer>> arr){
        c.add(m);
        for(int ele:arr.get(m)){
            if(!c.contains(ele)) check(ele,c,arr);
        }
        
    }
    
       	
    public static void dfs(boolean visited[],ArrayList<Integer> arr,int src,ArrayList<ArrayList<Integer>> adj){
        
        visited[src] = true;
        
        for(int ele:adj.get(src)){
            if(visited[ele]==false) dfs(visited,arr,ele,adj);
        }
        arr.add(src);
        
    }
}
