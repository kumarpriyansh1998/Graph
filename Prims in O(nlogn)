package GraphDS;
import java.util.*;

public class PrimsMST {
	
	int V;
	int E;
	ArrayList<edge> AdjList[];
	PrimsMST(int V,int E){
		this.V = V;
		this.E = E;
		AdjList = new ArrayList[V];
		for(int i=0;i<V;i++) {
			AdjList[i] = new ArrayList<>();
		}
	}
	
	
	public static class edge{
		int from;
		int to;
		int weight;
		edge(int from,int to,int weight){
			this.from = from;
			this.to = to;
			this.weight = weight;
		}
	}
	
	
	public void add_edge(int from,int to,int weight) {
		edge curr1 = new edge(from,to,weight);
		edge curr2= new edge(to,from,weight);
		AdjList[from].add(curr1);
		AdjList[to].add(curr2);
	}
	
	
	public class pair implements Comparable<pair>{
		int ind;
		int val;
		pair(int ind,int val){
			this.ind = ind;
			this.val =val;
		}
		@Override
		public int compareTo(pair o) {
			return this.val-o.val;
			
		}
	
	}
	
	public void Prims() {
		int parent[] = new int[V];
		Arrays.fill(parent,-1);
		
		boolean visited[] = new boolean[V];
		int wei[] = new int[V];
		Arrays.fill(wei, Integer.MAX_VALUE);
		wei[0] = 0;
		PriorityQueue<pair> pq = new PriorityQueue<>();
		pq.add(new pair(0,0));
		for(int i=0;i<V;i++) {
			int min_ind =0;
			pair curr_pair = pq.remove();
			min_ind = curr_pair.ind;
		
//			for(int j=0;j<V;j++) {
//				if(wei[j]<min && visited[j]==false) {
//					min = wei[j];
//					min_ind = j;
//				}
//			}
			visited[min_ind] = true;
			for(edge ele:AdjList[min_ind]) {
				if(ele.weight<wei[ele.to] && visited[ele.to]==false) {
					wei[ele.to] = ele.weight;
					pq.add(new pair(ele.to,ele.weight));
					parent[ele.to] = min_ind;
				}
			}
		}
		for(int i=1;i<V;i++) {
			System.out.println(parent[i]+" "+i);
		}
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		int V = sc.nextInt();
		int E = sc.nextInt();
		PrimsMST graph = new PrimsMST(V,E);
		for(int i=0;i<E;i++) {
			graph.add_edge(sc.nextInt(),sc.nextInt(), sc.nextInt());
		}
		graph.Prims();
		
		

	}

}


//6
//9
//0 1 4
//0 2 6
//1 2 6
//1 4 4
//1 3 3
//2 3 1
//4 3 2
//4 5 7
//3 5 3

