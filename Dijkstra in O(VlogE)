package GraphDS;
import java.util.*;

import pair.Pair;

public class DijkstraAlgo {
	int V;
	int E;
	ArrayList<edge> AdjList[];
	DijkstraAlgo(int V,int E){
		this.V = V;
		this.E = E;
		AdjList = new ArrayList[V];
		for(int i=0;i<V;i++) {
			AdjList[i] = new ArrayList<>();
		}
	}
	
	public static class edge{
		int from;
		int to;
		int weight;
		
		edge(int from,int to,int weight){
			this.from = from;
			this.to = to;
			this.weight = weight;
		}
	}
	
	public void add_edge(int from,int to,int weight) {
		edge curr = new edge(from,to,weight);
		AdjList[from].add(curr);
		edge curr2 = new edge(to,from,weight);
		AdjList[to].add(curr2);
	}
	
	
	public static class pair implements Comparable<pair>{
		int ind;
		int val;
		pair(int ind,int val){
			this.ind =ind;
			this.val =val;
		}
		@Override
		public int compareTo(pair o) {
			return this.val-o.val;
		}
	}
	
	public void Dijkstra() {
		boolean visited[] =new boolean[V];
		int parent[]= new int[V];
		Arrays.fill(parent, -1);
		int distance[] = new int[V];
		Arrays.fill(distance, Integer.MAX_VALUE);
		distance[0] = 0;
		
		PriorityQueue<pair> pq = new PriorityQueue<>();
		
		pq.add(new pair(0,0));
		
		for(int i=0;i<V;i++) {
			
			int min = Integer.MAX_VALUE;
			int min_ind = 0;
			pair temp = pq.remove();
			min = temp.val;
			min_ind = temp.ind;
			
			visited[min_ind] = true;
			
			for(edge ele:AdjList[min_ind]) {
				if(visited[ele.to]==false && ele.weight+min<distance[ele.to]) {
					distance[ele.to] = ele.weight+min;
					pq.add(new pair(ele.to,ele.weight+min));
					parent[ele.to] =min_ind;
				}
			}
		}
		
		for(int i=1;i<V;i++) {
			System.out.println(parent[i]+" "+i+" @ "+distance[i]);
		}
	}
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc =new Scanner(System.in);
		int V = sc.nextInt();
		int E = sc.nextInt();
		DijkstraAlgo graph = new DijkstraAlgo(V,E); 
		for(int i=0;i<E;i++) {
	 		graph.add_edge(sc.nextInt(),sc.nextInt(),sc.nextInt());
		}
		graph.Dijkstra();
		
		
		


	}

}


//6
//9
//0 1 1
//0 2 4
//1 2 4
//1 4 7
//1 3 2
//2 4 5
//4 3 4
//4 5 7
//3 5 6
