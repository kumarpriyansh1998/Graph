package Graph;
import java.util.*;

public class BridgesInGraph {
	int V;
	int E;
	ArrayList<edge> AdjList[];
	
	BridgesInGraph(int V,int E){
		this.V = V;
		this.E = E;
		AdjList = new ArrayList[V];
		for(int i=0;i<V;i++) {
			AdjList[i] = new ArrayList<>();
		}
	}
	
	public static class edge{
		int from;
		int to;
		int weight;
		edge(int from,int to,int weight){
			this.from = from;
			this.to = to;
			this.weight = weight;
		}
		
	}
	
	public void add_edge(int from,int to,int weight) {
		edge curr_edge1 = new edge(from,to,weight);
		edge curr_edge2 = new edge(to,from,weight);
		AdjList[from].add(curr_edge1);
		AdjList[to].add(curr_edge2);
	}
	
	public static int timer;
	public void find_bridge() {
		int lowVal[] = new int [V];
		int disTime[] =new int[V];
		Arrays.fill(lowVal,-1);
		Arrays.fill(disTime, -1);
		timer =0;
		for(int i=0;i<V;i++) {
			if(disTime[i]==-1) bridge_utility(lowVal,disTime,i,-1);
		}
		
	}
	
	public void bridge_utility(int lowVal[],int disTime[],int src,int parent){
		disTime[src] = timer;
		lowVal[src] = timer;
		timer++;
		for(edge ele:AdjList[src]) {
			if(disTime[ele.to]!=-1) {
				if(ele.to==parent) continue;
				if(ele.to!=parent) lowVal[src] = Math.min(lowVal[src],disTime[ele.to]);
			}
			else {
				bridge_utility(lowVal,disTime,ele.to,src);
				if(disTime[src]<lowVal[ele.to]) {
					System.out.println("Bridge: "+src+" "+ele.to);
				}
				lowVal[src] = Math.min(lowVal[src], lowVal[ele.to]);
				
			}
		}
		
		
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		int V = sc.nextInt();
		int E =sc.nextInt();
		BridgesInGraph graph = new BridgesInGraph(V,E);
		for(int i=0;i<E;i++) {
			graph.add_edge(sc.nextInt(), sc.nextInt(), sc.nextInt());
		}
		graph.find_bridge();

	}

}



//12
//13
//0 1 1
//1 2 1
//2 3 1
//3 4 1
//4 5 1
//5 6 1
//5 8 1
//6 7 1
//7 8 1
//7 9 1
//9 10 1
//9 11 1
//11 10 1
